{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\u200b\\-]"},"docs":[{"location":"","text":"F5 BIG-IP Kubernetes Gateway online docs \u00b6 Welcome. This is the online docs of F5 BIG-IP kubernetes Gateway. F5 BIG-IP kubernetes Gateway is an implementation of K8S Gateway API . For a list of supported Gateway API resources and features, see the Gateway API Compatibility doc. Souce code repo https://github.com/f5devcentral/bigip-kubernetes-gateway . Any questions, kindly Please Contact us . Click here , see the latest release.","title":"Overview"},{"location":"#f5-big-ip-kubernetes-gateway-online-docs","text":"Welcome. This is the online docs of F5 BIG-IP kubernetes Gateway. F5 BIG-IP kubernetes Gateway is an implementation of K8S Gateway API . For a list of supported Gateway API resources and features, see the Gateway API Compatibility doc. Souce code repo https://github.com/f5devcentral/bigip-kubernetes-gateway . Any questions, kindly Please Contact us . Click here , see the latest release.","title":"F5 BIG-IP Kubernetes Gateway online docs"},{"location":"Architecture/","text":"Overview \u00b6 This project aims to follow the Kubernetes Operator pattern . It uses Controllers . which provides a reconcile function responsible for synchronizing resources untile the desired state is reached on the cluster Framework and Workflow Design \u00b6 Basically, bigip-kubernetes-gateway architecture is designed as follows: It uses kubebuilder and controller-runtime framework to connect to the k8s cluster side and receive user operation events on various resources such as Gateway, HTTPRoute, Service, etc. It uses f5-bigip-rest module to connect to BIG-IP via iControl REST to do resource deliveries and deployments. Between the upstream and downstream, it uses a queue to decouple event processing and delivery logic. The correspondence between gateway-related resources and BIG-IP resources is as follows: From the above figure, we can see the correspondence between gateway-related resources and each resource on BIG-IP, that is, when using BIG-IP as a provider, the specific form of each gateway resource on BIG-IP is: K8S Resources BIG-IP Resources Controller BIG-IP Device GatewayClass Partition Gateway Virtual HTTPRoute iRule Service Pool Deploy(pods) Member The association of resources can be compared to a tree:","title":"Overview"},{"location":"Architecture/#overview","text":"This project aims to follow the Kubernetes Operator pattern . It uses Controllers . which provides a reconcile function responsible for synchronizing resources untile the desired state is reached on the cluster","title":"Overview"},{"location":"Architecture/#framework-and-workflow-design","text":"Basically, bigip-kubernetes-gateway architecture is designed as follows: It uses kubebuilder and controller-runtime framework to connect to the k8s cluster side and receive user operation events on various resources such as Gateway, HTTPRoute, Service, etc. It uses f5-bigip-rest module to connect to BIG-IP via iControl REST to do resource deliveries and deployments. Between the upstream and downstream, it uses a queue to decouple event processing and delivery logic. The correspondence between gateway-related resources and BIG-IP resources is as follows: From the above figure, we can see the correspondence between gateway-related resources and each resource on BIG-IP, that is, when using BIG-IP as a provider, the specific form of each gateway resource on BIG-IP is: K8S Resources BIG-IP Resources Controller BIG-IP Device GatewayClass Partition Gateway Virtual HTTPRoute iRule Service Pool Deploy(pods) Member The association of resources can be compared to a tree:","title":"Framework and Workflow Design"},{"location":"Architecture/gatewayclassrefer/","text":"GatewayClass and BIG-IP References \u00b6 Relationships Between GatewayClass, Controller and BIG-IP \u00b6 There is an n-1-1 relationship between GatewayClass, Controller and BIG-IP. Controller and BIG-IP are one-to-one relationships, and BIG-IP here can be understood as a set of BIG-IP, such as two BIG-IPs are HA relationships with each other. In the same K8S cluster, a controller controls a group of BIG-IPs and is responsible for different gatewayClasses. (The current implementation considers the case of Standalone BIG-IP.) The relationship between GatewayClass and Controller(also as BIG-IP) is designed as a many-to-one relationship, that is, multiple gatewayclasses can correspond to the same BIG-IP, the name field of the GatewayClass resource is mapped as the partition name on the BIG-IP, and the gateway-related resources associated with the GatewayClass will be created as ltm resources under that partition. The mapping between GatewayClass and Controller is achieved through the following properties: The controllerName field of spec in GatewayClass <=> --controller-name in the controller startup parameter gatewayclass.yaml: --- apiVersion : gateway.networking.k8s.io/v1beta1 kind : GatewayClass metadata : name : bigip spec : # The controllerName field corresponds to the --controllerName parameter at startup, if this field cannot match the --controllerName parameter, this gatewayclass resource will not be processed by the controller. controllerName : f5.io/gateway-controller-name # parametersRef in the gatewayclass resource configuration will be ignored. # parametersRef: # group: # kind: # name: # namespace: When the GatewayClass Resource Changes \u00b6 When the user changes the name of the GatewayClass, it means that the user deletes the original GatewayClass and creates a new GatewayClass, and the Controller will erase the partition corresponding to the GatewayClass name and all the information under it on the BIG-IP. Then the controller creates a new partiton of the GatewayClass name and rebuild the partition's Gateway resources. Therefore, for users, changing the GatewayClass name needs to be cautious.","title":"GatewayClass and BIG-IP References"},{"location":"Architecture/gatewayclassrefer/#gatewayclass-and-big-ip-references","text":"","title":"GatewayClass and BIG-IP References"},{"location":"Architecture/gatewayclassrefer/#relationships-between-gatewayclass-controller-and-big-ip","text":"There is an n-1-1 relationship between GatewayClass, Controller and BIG-IP. Controller and BIG-IP are one-to-one relationships, and BIG-IP here can be understood as a set of BIG-IP, such as two BIG-IPs are HA relationships with each other. In the same K8S cluster, a controller controls a group of BIG-IPs and is responsible for different gatewayClasses. (The current implementation considers the case of Standalone BIG-IP.) The relationship between GatewayClass and Controller(also as BIG-IP) is designed as a many-to-one relationship, that is, multiple gatewayclasses can correspond to the same BIG-IP, the name field of the GatewayClass resource is mapped as the partition name on the BIG-IP, and the gateway-related resources associated with the GatewayClass will be created as ltm resources under that partition. The mapping between GatewayClass and Controller is achieved through the following properties: The controllerName field of spec in GatewayClass <=> --controller-name in the controller startup parameter gatewayclass.yaml: --- apiVersion : gateway.networking.k8s.io/v1beta1 kind : GatewayClass metadata : name : bigip spec : # The controllerName field corresponds to the --controllerName parameter at startup, if this field cannot match the --controllerName parameter, this gatewayclass resource will not be processed by the controller. controllerName : f5.io/gateway-controller-name # parametersRef in the gatewayclass resource configuration will be ignored. # parametersRef: # group: # kind: # name: # namespace:","title":"Relationships Between GatewayClass, Controller and BIG-IP"},{"location":"Architecture/gatewayclassrefer/#when-the-gatewayclass-resource-changes","text":"When the user changes the name of the GatewayClass, it means that the user deletes the original GatewayClass and creates a new GatewayClass, and the Controller will erase the partition corresponding to the GatewayClass name and all the information under it on the BIG-IP. Then the controller creates a new partiton of the GatewayClass name and rebuild the partition's Gateway resources. Therefore, for users, changing the GatewayClass name needs to be cautious.","title":"When the GatewayClass Resource Changes"},{"location":"Architecture/parameters/","text":"Parameters \u00b6 Examples of the usecase of parameters are available in the deployment file: deploy/3.deploy-bigip-kubernetes-gateway-controller.yaml . There are 2 parts of BIG-IP configurations: The password of BIG-IP passed in via a Kubernetes Secret(Part 1). Some additional BIG-IP configuration information passed in via a separate Kubernetes Configmap(Part 2). In the controller deployment yaml, the two parts of the parameters are passed in the form of volume, and the controller reads the specific configuration content of indicated paths. Part 1: bigip-login \u00b6 --- apiVersion : v1 kind : Secret metadata : name : bigip-login namespace : kube-system data : password : UEBzc3cwcmQxMjM= # base64 password for admin type : Opaque BIG-IP's password for admin is stored in a separate Secret type resource for secure consideration. Part 2: bigip-kubernetes-gateway-configmap \u00b6 --- apiVersion : v1 kind : ConfigMap metadata : name : bigip-kubernetes-gateway-configmap namespace : kube-system data : bigip-kubernetes-gateway-config.yaml : | # configuration for BIG-IP setup bigips: - mgmtIpAddress: \"10.250.17.104\" vxlanProfileName: \"fl-vxlan\" vxlanPort: \"8472\" vxlanLocalAddress: \"10.250.18.120\" selfIpName: \"flannel-self\" selfIpAddress: \"10.42.20.1/16\" url: \"https://10.250.17.104:8443\" username: \"admin\" Within the above configmap, it stores BIG-IP configuration for network setup and resource managements. The controller would configure the BIG-IPs as specified to make sure the data plane connection between BIG-IP and the kubernetes cluster is OK. The meaning of fields are: mgmtIpAddress : \"10.250.17.104\" Management IP for connection. vxlanProfileName : \"fl-vxlan\" Tunnel profile for binding to the very tunnel in flannel CNI mode. vxlanPort : \"8472\" Tunnel profile port for binding to the very tunnel in flannel CNI mode. vxlanLocalAddress : \"10.250.18.120\" The local address for the tunnel(VTEP) in flannel CNI mode. selfIpName : \"flannel-self\" The name of the self IP address definition. selfIpAddress : \"10.42.20.1/16\" The IP address associated to the vxlan tunnel. url : \" https://10.250.17.104:8443 \" URL for BIG-IP connection and management. username : \"admin\" username for management, must be \"admin\" for now. Part 3: bigip-kubernetes-gateway deployment and service \u00b6 --- apiVersion : apps/v1 kind : Deployment metadata : name : bigip-kubernetes-gateway namespace : kube-system spec : replicas : 1 #... spec : serviceAccountName : k8s-bigip-ctlr nodeSelector : node-role.kubernetes.io/control-plane : \"true\" # node-role.kubernetes.io/master: \"true\" containers : # use `kubectl logs -f deployment/bigip-kubernetes-gateway -c bigip-kubernetes-gateway-pod -n kube-system` for tracing. - name : bigip-kubernetes-gateway-pod image : jeffreycoho/bigip-kubernetes-gateway:12060066-20221206-153736 imagePullPolicy : IfNotPresent command : [ \"/bigip-kubernetes-gateway-controller-linux\" ] args : [ \"--controller-name=f5.io/gateway-controller-name\" , \"--mode=flannel\" , \"--vxlan-tunnel-name=fl-vxlan\" , \"--bigip-config-directory=/bigip-config\" , \"--bigip-credential-directory=/bigip-credential\" , ] volumeMounts : - name : bigip-credential mountPath : \"/bigip-credential\" readOnly : true - name : bigip-config mountPath : /bigip-config readOnly : true volumes : - name : bigip-credential secret : secretName : bigip-login - name : bigip-config configMap : name : bigip-kubernetes-gateway-configmap For details about the usage of the file, See installation .","title":"Controller parameters"},{"location":"Architecture/parameters/#parameters","text":"Examples of the usecase of parameters are available in the deployment file: deploy/3.deploy-bigip-kubernetes-gateway-controller.yaml . There are 2 parts of BIG-IP configurations: The password of BIG-IP passed in via a Kubernetes Secret(Part 1). Some additional BIG-IP configuration information passed in via a separate Kubernetes Configmap(Part 2). In the controller deployment yaml, the two parts of the parameters are passed in the form of volume, and the controller reads the specific configuration content of indicated paths.","title":"Parameters"},{"location":"Architecture/parameters/#part-1-bigip-login","text":"--- apiVersion : v1 kind : Secret metadata : name : bigip-login namespace : kube-system data : password : UEBzc3cwcmQxMjM= # base64 password for admin type : Opaque BIG-IP's password for admin is stored in a separate Secret type resource for secure consideration.","title":"Part 1: bigip-login"},{"location":"Architecture/parameters/#part-2-bigip-kubernetes-gateway-configmap","text":"--- apiVersion : v1 kind : ConfigMap metadata : name : bigip-kubernetes-gateway-configmap namespace : kube-system data : bigip-kubernetes-gateway-config.yaml : | # configuration for BIG-IP setup bigips: - mgmtIpAddress: \"10.250.17.104\" vxlanProfileName: \"fl-vxlan\" vxlanPort: \"8472\" vxlanLocalAddress: \"10.250.18.120\" selfIpName: \"flannel-self\" selfIpAddress: \"10.42.20.1/16\" url: \"https://10.250.17.104:8443\" username: \"admin\" Within the above configmap, it stores BIG-IP configuration for network setup and resource managements. The controller would configure the BIG-IPs as specified to make sure the data plane connection between BIG-IP and the kubernetes cluster is OK. The meaning of fields are: mgmtIpAddress : \"10.250.17.104\" Management IP for connection. vxlanProfileName : \"fl-vxlan\" Tunnel profile for binding to the very tunnel in flannel CNI mode. vxlanPort : \"8472\" Tunnel profile port for binding to the very tunnel in flannel CNI mode. vxlanLocalAddress : \"10.250.18.120\" The local address for the tunnel(VTEP) in flannel CNI mode. selfIpName : \"flannel-self\" The name of the self IP address definition. selfIpAddress : \"10.42.20.1/16\" The IP address associated to the vxlan tunnel. url : \" https://10.250.17.104:8443 \" URL for BIG-IP connection and management. username : \"admin\" username for management, must be \"admin\" for now.","title":"Part 2: bigip-kubernetes-gateway-configmap"},{"location":"Architecture/parameters/#part-3-bigip-kubernetes-gateway-deployment-and-service","text":"--- apiVersion : apps/v1 kind : Deployment metadata : name : bigip-kubernetes-gateway namespace : kube-system spec : replicas : 1 #... spec : serviceAccountName : k8s-bigip-ctlr nodeSelector : node-role.kubernetes.io/control-plane : \"true\" # node-role.kubernetes.io/master: \"true\" containers : # use `kubectl logs -f deployment/bigip-kubernetes-gateway -c bigip-kubernetes-gateway-pod -n kube-system` for tracing. - name : bigip-kubernetes-gateway-pod image : jeffreycoho/bigip-kubernetes-gateway:12060066-20221206-153736 imagePullPolicy : IfNotPresent command : [ \"/bigip-kubernetes-gateway-controller-linux\" ] args : [ \"--controller-name=f5.io/gateway-controller-name\" , \"--mode=flannel\" , \"--vxlan-tunnel-name=fl-vxlan\" , \"--bigip-config-directory=/bigip-config\" , \"--bigip-credential-directory=/bigip-credential\" , ] volumeMounts : - name : bigip-credential mountPath : \"/bigip-credential\" readOnly : true - name : bigip-config mountPath : /bigip-config readOnly : true volumes : - name : bigip-credential secret : secretName : bigip-login - name : bigip-config configMap : name : bigip-kubernetes-gateway-configmap For details about the usage of the file, See installation .","title":"Part 3: bigip-kubernetes-gateway deployment and service"},{"location":"Architecture/resources-layout/","text":"Gateway Resources Management \u00b6 The four resources of GatewayClass Gateway HTTPRoute Service are related to each other to form a tree-like association, of which GatewayClass is the root. The following figure shows the analogy relationship with each resource on the BIG-IP: In the figure above, G stands for Gateway, R stands for HTTPRoute, S stands for Service, and gwc1 gwc2 gwc3 are three gatewayClass resources, all are attached to the same BIG-IP x. Gateway-related resources will be distributed to the associated partitions with gatewayclass name, including Gateway and HTTPRoute. HTTPRoute resources do not contain partition information, so only when the associated gateway resource appears can it be determined which partition its corresponding irule is sent to, so HTTPRoute without any gateway association will not be sent immediately, but will be issued when it is referenced by a virtual. The service information associated with HTTPRoute will be sent in the form of a pool to a specific partition \"cis-c-tenant\". In the future, it may change according to customer needs, such as distributed to a partition named Service.namespace. Note here that the nodes associated with each pool (here referring to ltm/node) will not overlap in a single K8S cluster CNI environment, that is, there will be no situation where multiple pool members share a node, so the node information will also be distributed to the partition where the pool is. It should be noted that: In the above figure, there are 2 gateways under gwc1 and gwc2 that references the same HTTPRoute, in this case, the HTTPRoute resource is logically the same resource, but the actual deliveries are two iRules with the same content, located under gwc1 and gwc2 partitions. In the figure above, iRules in two partitions gwc1 and gwc2 refer to the same service, and according to the current distribution design of the service (Pool+Member), the service is distributed to a specific partition cis-c-tenant. So it can be referenced by multiple iRules, so physically, the pool converted from this service is unique.","title":"Gateway Resource Management"},{"location":"Architecture/resources-layout/#gateway-resources-management","text":"The four resources of GatewayClass Gateway HTTPRoute Service are related to each other to form a tree-like association, of which GatewayClass is the root. The following figure shows the analogy relationship with each resource on the BIG-IP: In the figure above, G stands for Gateway, R stands for HTTPRoute, S stands for Service, and gwc1 gwc2 gwc3 are three gatewayClass resources, all are attached to the same BIG-IP x. Gateway-related resources will be distributed to the associated partitions with gatewayclass name, including Gateway and HTTPRoute. HTTPRoute resources do not contain partition information, so only when the associated gateway resource appears can it be determined which partition its corresponding irule is sent to, so HTTPRoute without any gateway association will not be sent immediately, but will be issued when it is referenced by a virtual. The service information associated with HTTPRoute will be sent in the form of a pool to a specific partition \"cis-c-tenant\". In the future, it may change according to customer needs, such as distributed to a partition named Service.namespace. Note here that the nodes associated with each pool (here referring to ltm/node) will not overlap in a single K8S cluster CNI environment, that is, there will be no situation where multiple pool members share a node, so the node information will also be distributed to the partition where the pool is. It should be noted that: In the above figure, there are 2 gateways under gwc1 and gwc2 that references the same HTTPRoute, in this case, the HTTPRoute resource is logically the same resource, but the actual deliveries are two iRules with the same content, located under gwc1 and gwc2 partitions. In the figure above, iRules in two partitions gwc1 and gwc2 refer to the same service, and according to the current distribution design of the service (Pool+Member), the service is distributed to a specific partition cis-c-tenant. So it can be referenced by multiple iRules, so physically, the pool converted from this service is unique.","title":"Gateway Resources Management"},{"location":"Operation-and-troubleshooting/ki/","text":"Known Issues \u00b6 No issue yet. Please report your issue or suggestion on https://github.com/f5devcentral/bigip-kubernetes-gateway/issues .","title":"Common FAQ"},{"location":"Operation-and-troubleshooting/ki/#known-issues","text":"No issue yet. Please report your issue or suggestion on https://github.com/f5devcentral/bigip-kubernetes-gateway/issues .","title":"Known Issues"},{"location":"Operation-and-troubleshooting/trubeshooting/","text":"Trouble Shooting \u00b6 Use the following command to trace or detect any issue: $ kubectl logs -f deployment/bigip-kubernetes-gateway -c bigip-kubernetes-gateway-pod -n kube-system Will continously complement this section in the future.","title":"Troubleshooting"},{"location":"Operation-and-troubleshooting/trubeshooting/#trouble-shooting","text":"Use the following command to trace or detect any issue: $ kubectl logs -f deployment/bigip-kubernetes-gateway -c bigip-kubernetes-gateway-pod -n kube-system Will continously complement this section in the future.","title":"Trouble Shooting"},{"location":"Release-notes/","text":"Releases \u00b6 The bigip-kubernetes-gateway versions are released on dockerhub as Docker images . The code repository is f5devcentral/bigip-kubernetes-gateway . Release v0.0.2 \u00b6 Docker Image: \u00b6 f5devcentral/bigip-kubernetes-gateway:v0.0.2-20221129 Reference: \u00b6 https://gateway-api.f5se.io/quick-start/installation/ Release Notes: \u00b6 Add support for gatewayclass resources, see gatewayclass design . Implement the ability of handling disorder events for kinds of resources. Improve the design and usage documentation: https://gateway-api.f5se.io/ Optimize the resource synchronization mode at startup time for deployment integrity. Update the f5-bigip-rest dependency for better deployments. Full Changelog : https://github.com/f5devcentral/bigip-kubernetes-gateway/compare/v0.0.1...v0.0.2{:target=\"_blank \"} Release v0.0.1 \u00b6 Docker Image: \u00b6 f5devcentral/bigip-kubernetes-gateway:v0.0.1-20221115 Deployment Reference: \u00b6 https://gateway-api.f5se.io/quick-start/installation/ Release Notes: \u00b6 DevOps and Monitoring Support \u00b6 Supports full DevOps capabilities, providing all YAML files for installation and deployment. Supports integration with Prometheus to capture controller performance data Basic automated testing capabilities. Feature Support \u00b6 Supports the ability to deliver and configure resources: gateway httproute and service deployment, to BIG-IP. Supports resource specs: gatewayclass: not support gateway\uff1a listeners\uff1aname port protocol addresses\uff1avalue httproute parentRefs hostnames rules matches: method header path queryParams filters: RequestHeaderModifier RequestRedirect ExtensionRef backendRefs: partial, only one backend supported Supports service types: NodePort ClusterIP. Supports for CNI flannel and calico networks.","title":"Releases"},{"location":"Release-notes/#releases","text":"The bigip-kubernetes-gateway versions are released on dockerhub as Docker images . The code repository is f5devcentral/bigip-kubernetes-gateway .","title":"Releases"},{"location":"Release-notes/#release-v002","text":"","title":"Release v0.0.2"},{"location":"Release-notes/#docker-image","text":"f5devcentral/bigip-kubernetes-gateway:v0.0.2-20221129","title":"Docker Image:"},{"location":"Release-notes/#reference","text":"https://gateway-api.f5se.io/quick-start/installation/","title":"Reference:"},{"location":"Release-notes/#release-notes","text":"Add support for gatewayclass resources, see gatewayclass design . Implement the ability of handling disorder events for kinds of resources. Improve the design and usage documentation: https://gateway-api.f5se.io/ Optimize the resource synchronization mode at startup time for deployment integrity. Update the f5-bigip-rest dependency for better deployments. Full Changelog : https://github.com/f5devcentral/bigip-kubernetes-gateway/compare/v0.0.1...v0.0.2{:target=\"_blank \"}","title":"Release Notes:"},{"location":"Release-notes/#release-v001","text":"","title":"Release v0.0.1"},{"location":"Release-notes/#docker-image_1","text":"f5devcentral/bigip-kubernetes-gateway:v0.0.1-20221115","title":"Docker Image:"},{"location":"Release-notes/#deployment-reference","text":"https://gateway-api.f5se.io/quick-start/installation/","title":"Deployment Reference:"},{"location":"Release-notes/#release-notes_1","text":"","title":"Release Notes:"},{"location":"Release-notes/#devops-and-monitoring-support","text":"Supports full DevOps capabilities, providing all YAML files for installation and deployment. Supports integration with Prometheus to capture controller performance data Basic automated testing capabilities.","title":"DevOps and Monitoring Support"},{"location":"Release-notes/#feature-support","text":"Supports the ability to deliver and configure resources: gateway httproute and service deployment, to BIG-IP. Supports resource specs: gatewayclass: not support gateway\uff1a listeners\uff1aname port protocol addresses\uff1avalue httproute parentRefs hostnames rules matches: method header path queryParams filters: RequestHeaderModifier RequestRedirect ExtensionRef backendRefs: partial, only one backend supported Supports service types: NodePort ClusterIP. Supports for CNI flannel and calico networks.","title":"Feature Support"},{"location":"Support-and-contact/","text":"Support and contact \u00b6 For the gateway controller support: \u00b6 Currently please raise your questions or issues by github Issues For the online docs support: \u00b6 Currently please raise your questions or issues by github Issues Welcome contact us by below ways: \u00b6 Slack channel (for global users) Join the f5CloudSolutions Slack workspace first. After joining in the workspace, login into the workspace, find channel #oss-bigip-kubernetes-gateway and join it. That's all, start your conversation. Wechat group (for China Wechat users only) zongzw","title":"Tech Support"},{"location":"Support-and-contact/#support-and-contact","text":"","title":"Support and contact"},{"location":"Support-and-contact/#for-the-gateway-controller-support","text":"Currently please raise your questions or issues by github Issues","title":"For the gateway controller support:"},{"location":"Support-and-contact/#for-the-online-docs-support","text":"Currently please raise your questions or issues by github Issues","title":"For the online docs support:"},{"location":"Support-and-contact/#welcome-contact-us-by-below-ways","text":"Slack channel (for global users) Join the f5CloudSolutions Slack workspace first. After joining in the workspace, login into the workspace, find channel #oss-bigip-kubernetes-gateway and join it. That's all, start your conversation. Wechat group (for China Wechat users only) zongzw","title":"Welcome contact us by below ways:"},{"location":"Support-and-contact/contributions/","text":"Wecome any contributions \u00b6 For online docs, kindly please PR to this repo For coding contribution kindly please refer the guide in the code repo . Here are the contributors for now\uff1a zongzw f5zong Niklaus-xie myf5 Jing Lin License \u00b6 Copyright 2022. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Contributions"},{"location":"Support-and-contact/contributions/#wecome-any-contributions","text":"For online docs, kindly please PR to this repo For coding contribution kindly please refer the guide in the code repo . Here are the contributors for now\uff1a zongzw f5zong Niklaus-xie myf5 Jing Lin","title":"Wecome any contributions"},{"location":"Support-and-contact/contributions/#license","text":"Copyright 2022. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"Use-Cases/advancedhttp/","text":"Advanced HTTPRoute Usecase \u00b6","title":"Advanced HTTProute"},{"location":"Use-Cases/advancedhttp/#advanced-httproute-usecase","text":"","title":"Advanced HTTPRoute Usecase"},{"location":"Use-Cases/bigip-setup/","text":"BIG-IP Setup \u00b6 After the bigip-kubernetes-gateway controller is deployed, the first step is to create a gatewayclass resource. A gatewayclass resource corresponds to a BIG-IP. According to the definition of gatewayclass by SIGNetworks , we know that gatewayclass marks the implementation carrier of gateway-related resources, and in the bigip-kubernetes-gateway senarios, the carrier corresponding to the gatewayclass is BIG-IP. gatewayclass.yaml: --- apiVersion : gateway.networking.k8s.io/v1beta1 kind : GatewayClass metadata : name : bigip spec : controllerName : f5.io/gateway-controller-name parametersRef : group : core kind : ConfigMap name : my-configmap namespace : kube-system The configmap my-configmap in the parametersRef section is the BIG-IP configuration file. BIG-IP can be configured by executing kubectl apply -f gatewayclass.yaml when the bigip-kubernetes-gateway controller receives this event from the user. The controller will parse the relevant configuration in the spec and configure the BIG-IP device, including the network, basic partition, and so on.","title":"BIG-IP Provider Setup"},{"location":"Use-Cases/bigip-setup/#big-ip-setup","text":"After the bigip-kubernetes-gateway controller is deployed, the first step is to create a gatewayclass resource. A gatewayclass resource corresponds to a BIG-IP. According to the definition of gatewayclass by SIGNetworks , we know that gatewayclass marks the implementation carrier of gateway-related resources, and in the bigip-kubernetes-gateway senarios, the carrier corresponding to the gatewayclass is BIG-IP. gatewayclass.yaml: --- apiVersion : gateway.networking.k8s.io/v1beta1 kind : GatewayClass metadata : name : bigip spec : controllerName : f5.io/gateway-controller-name parametersRef : group : core kind : ConfigMap name : my-configmap namespace : kube-system The configmap my-configmap in the parametersRef section is the BIG-IP configuration file. BIG-IP can be configured by executing kubectl apply -f gatewayclass.yaml when the bigip-kubernetes-gateway controller receives this event from the user. The controller will parse the relevant configuration in the spec and configure the BIG-IP device, including the network, basic partition, and so on.","title":"BIG-IP Setup"},{"location":"Use-Cases/crossrefer/","text":"Cross Reference Usecase \u00b6","title":"Cross Reference"},{"location":"Use-Cases/crossrefer/#cross-reference-usecase","text":"","title":"Cross Reference Usecase"},{"location":"Use-Cases/simplehttp/","text":"Simple HTTPRoute Usecase \u00b6","title":"Simple HTTProute"},{"location":"Use-Cases/simplehttp/#simple-httproute-usecase","text":"","title":"Simple HTTPRoute Usecase"},{"location":"quick-start/","text":"Get Started \u00b6 You\u2019ll need a Kubernetes cluster to run against. You can use KIND to get a local cluster for testing, or run against a remote cluster. Note: bigip-kubernetes-gateway controller will automatically use the current context in your kubeconfig file (i.e. whatever cluster kubectl cluster-info shows). If the controller runs in In-Cluster mode, it will depends on the serviceaccount and role/role-binding described in installation . Kubernetes Setup \u00b6 After you have a K8s cluster, we need to configure it for different CNI types to make sure connection between BIG-IP and kubernetes cluster is OK. Note: We need to configure both sides of BIG-IPs and the Kubernetes cluster. While, The BIG-IP side is configured by controller itself automatically. Here, we only need to configure Kubernetes side manually. In Flannel mode \u00b6 We need to create a BIG-IP virtual node to connect the BIG-IP node to your Kubernetes cluster flannel network. Use the following yaml configuration file bigip1.yaml: bigip1.yaml: apiVersion : v1 kind : Node metadata : name : bigip1 annotations : # Replace IP with Self-IP for your deployment flannel.alpha.coreos.com/public-ip : \"10.250.18.105\" # uncomment the following line if using v6 tunnel and modify bigip v6 address # flannel.alpha.coreos.com/public-ipv6: \"2021:15::125\" # Replace MAC with your BIGIP Flannel VXLAN Tunnel MAC flannel.alpha.coreos.com/backend-data : '{\"VtepMAC\":\"fa:16:3e:d5:28:07\"}' # uncomment the following line if using v6 tunnel and modify mac accordingly # flannel.alpha.coreos.com/backend-v6-data: '{\"VtepMAC\":\"fa:16:3e:d5:28:07\"}' flannel.alpha.coreos.com/backend-type : \"vxlan\" flannel.alpha.coreos.com/kube-subnet-manager : \"true\" spec : # Replace Subnet with your BIGIP Flannel Subnet podCIDR : \"10.42.20.0/24\" # uncomment the following 3 lines if using v6 tunnel and modify CIDRs using real data #podCIDRs: #- \"10.42.20.0/24\" #- \"2021:118:2:2::/64\" The mac address can be obtained using the tmsh command on BIG-IP: $ show net tunnels tunnel fl-tunnel all-properties $ show net tunnels tunnel fl-tunnel6 all-properties Put the above into the bigip1.yaml file and execute the file contents using the kubectl apply -f bigip1.yaml command. In Calico mode \u00b6 On Kubernetes master node, run the command to get calicoctl command line: $ curl -O -L https://github.com/projectcalico/calicoctl/releases/download/v3.10.0/calicoctl ` $ chmod +x calicoctl $ sudo mv calicoctl /usr/local/bin Edit /etc/calico/calico.ctl.cfg file $ sudo mkdir /etc/calico $ vim /etc/calico/calicoctl.cfg calicoctl.cfg apiVersion : projectcalico.org/v3 kind : CalicoAPIConfig metadata : spec : datastoreType : \"kubernetes\" kubeconfig : \"/root/.kube/config\" # change to actual kubeconfig path Run calicoctl get nodes to verify calicoctl runtime works OK. Run the following command to create BGP Group: cat << EOF | calicoctl create -f - apiVersion: projectcalico.org/v3 kind: BGPConfiguration metadata: name: default spec: logSeverityScreen: Info nodeToNodeMeshEnabled: true asNumber: 64512 EOF Run the following command to create BIG-IP peer for your kubernetes cluster. Notes : Change the peerIP to actual BIG-IP traffic IP(the selfIP for data traffic). cat << EOF | calicoctl create -f - apiVersion: projectcalico.org/v3 kind: BGPPeer metadata: name: bgppeer-bigip1 spec: peerIP: 192.2.3.4 asNumber: 64512 EOF After the configuration, we can use calicoctl node status command to check the BIG-IP peer status: # calicoctl node status Calico process is running. IPv4 BGP status +---------------+-------------------+-------+----------+-------------+ | PEER ADDRESS | PEER TYPE | STATE | SINCE | INFO | +---------------+-------------------+-------+----------+-------------+ | 10 .250.17.182 | node-to-node mesh | up | 03 :07:33 | Established | | 10 .250.17.111 | global | up | 06 :18:28 | Established | +---------------+-------------------+-------+----------+-------------+ More references, see https://f5-k8s-istio-lab.readthedocs.io/en/latest/BGP/introduction.html","title":"Prerequisites"},{"location":"quick-start/#get-started","text":"You\u2019ll need a Kubernetes cluster to run against. You can use KIND to get a local cluster for testing, or run against a remote cluster. Note: bigip-kubernetes-gateway controller will automatically use the current context in your kubeconfig file (i.e. whatever cluster kubectl cluster-info shows). If the controller runs in In-Cluster mode, it will depends on the serviceaccount and role/role-binding described in installation .","title":"Get Started"},{"location":"quick-start/#kubernetes-setup","text":"After you have a K8s cluster, we need to configure it for different CNI types to make sure connection between BIG-IP and kubernetes cluster is OK. Note: We need to configure both sides of BIG-IPs and the Kubernetes cluster. While, The BIG-IP side is configured by controller itself automatically. Here, we only need to configure Kubernetes side manually.","title":"Kubernetes Setup"},{"location":"quick-start/#in-flannel-mode","text":"We need to create a BIG-IP virtual node to connect the BIG-IP node to your Kubernetes cluster flannel network. Use the following yaml configuration file bigip1.yaml: bigip1.yaml: apiVersion : v1 kind : Node metadata : name : bigip1 annotations : # Replace IP with Self-IP for your deployment flannel.alpha.coreos.com/public-ip : \"10.250.18.105\" # uncomment the following line if using v6 tunnel and modify bigip v6 address # flannel.alpha.coreos.com/public-ipv6: \"2021:15::125\" # Replace MAC with your BIGIP Flannel VXLAN Tunnel MAC flannel.alpha.coreos.com/backend-data : '{\"VtepMAC\":\"fa:16:3e:d5:28:07\"}' # uncomment the following line if using v6 tunnel and modify mac accordingly # flannel.alpha.coreos.com/backend-v6-data: '{\"VtepMAC\":\"fa:16:3e:d5:28:07\"}' flannel.alpha.coreos.com/backend-type : \"vxlan\" flannel.alpha.coreos.com/kube-subnet-manager : \"true\" spec : # Replace Subnet with your BIGIP Flannel Subnet podCIDR : \"10.42.20.0/24\" # uncomment the following 3 lines if using v6 tunnel and modify CIDRs using real data #podCIDRs: #- \"10.42.20.0/24\" #- \"2021:118:2:2::/64\" The mac address can be obtained using the tmsh command on BIG-IP: $ show net tunnels tunnel fl-tunnel all-properties $ show net tunnels tunnel fl-tunnel6 all-properties Put the above into the bigip1.yaml file and execute the file contents using the kubectl apply -f bigip1.yaml command.","title":"In Flannel mode"},{"location":"quick-start/#in-calico-mode","text":"On Kubernetes master node, run the command to get calicoctl command line: $ curl -O -L https://github.com/projectcalico/calicoctl/releases/download/v3.10.0/calicoctl ` $ chmod +x calicoctl $ sudo mv calicoctl /usr/local/bin Edit /etc/calico/calico.ctl.cfg file $ sudo mkdir /etc/calico $ vim /etc/calico/calicoctl.cfg calicoctl.cfg apiVersion : projectcalico.org/v3 kind : CalicoAPIConfig metadata : spec : datastoreType : \"kubernetes\" kubeconfig : \"/root/.kube/config\" # change to actual kubeconfig path Run calicoctl get nodes to verify calicoctl runtime works OK. Run the following command to create BGP Group: cat << EOF | calicoctl create -f - apiVersion: projectcalico.org/v3 kind: BGPConfiguration metadata: name: default spec: logSeverityScreen: Info nodeToNodeMeshEnabled: true asNumber: 64512 EOF Run the following command to create BIG-IP peer for your kubernetes cluster. Notes : Change the peerIP to actual BIG-IP traffic IP(the selfIP for data traffic). cat << EOF | calicoctl create -f - apiVersion: projectcalico.org/v3 kind: BGPPeer metadata: name: bgppeer-bigip1 spec: peerIP: 192.2.3.4 asNumber: 64512 EOF After the configuration, we can use calicoctl node status command to check the BIG-IP peer status: # calicoctl node status Calico process is running. IPv4 BGP status +---------------+-------------------+-------+----------+-------------+ | PEER ADDRESS | PEER TYPE | STATE | SINCE | INFO | +---------------+-------------------+-------+----------+-------------+ | 10 .250.17.182 | node-to-node mesh | up | 03 :07:33 | Established | | 10 .250.17.111 | global | up | 06 :18:28 | Established | +---------------+-------------------+-------+----------+-------------+ More references, see https://f5-k8s-istio-lab.readthedocs.io/en/latest/BGP/introduction.html","title":"In Calico mode"},{"location":"quick-start/installation/","text":"Installation \u00b6 In the repository, we provide the corresponding Gateway API deployment configuration file, which can be used in the deployment process of the BIGIP-Kubernetes-Gateway controller in general. The directory where the deployment files are located is: https://github.com/f5devcentral/bigip-kubernetes-gateway/tree/master/deploy . The files are numbered and can complete the deployment process in order, where: file name functionality notes 1.clusterrole-and-binding.yaml Create a user and role with corresponding operation permissions in the k8S cluster No further input is required 2.install-kubernetes-gatewayapi-CRDs.yaml Install the gateway API CRD and admission deployments No further input is required 3.deploy-bigip-kubernetes-gateway-controller.yaml Deploy bigip-kubernetes-gateway controller Required inputs by user to change BIGIP password: , BIGIP Configurations in bigips: and image version in image: Each of the above files can be completed by executing the kubectl command separately in order: $ kubectl apply -f 1 .clusterrole-and-binding.yaml $ kubectl apply -f 2 .install-kubernetes-gatewayapi-CRDs.yaml $ kubectl apply -f 3 .deploy-bigip-kubernetes-gateway-controller.yaml After the deployment is complete, the bigip-kubernetes-gateway controller listens for CRUD events for gateway-related resources. View deployment results via kubectl get deployment -n kube-system . View the run log via kubectl logs -f deployment/bigip-kubernetes-gateway -c bigip-kubernetes-gateway-pod -n kube-system","title":"Installing guide"},{"location":"quick-start/installation/#installation","text":"In the repository, we provide the corresponding Gateway API deployment configuration file, which can be used in the deployment process of the BIGIP-Kubernetes-Gateway controller in general. The directory where the deployment files are located is: https://github.com/f5devcentral/bigip-kubernetes-gateway/tree/master/deploy . The files are numbered and can complete the deployment process in order, where: file name functionality notes 1.clusterrole-and-binding.yaml Create a user and role with corresponding operation permissions in the k8S cluster No further input is required 2.install-kubernetes-gatewayapi-CRDs.yaml Install the gateway API CRD and admission deployments No further input is required 3.deploy-bigip-kubernetes-gateway-controller.yaml Deploy bigip-kubernetes-gateway controller Required inputs by user to change BIGIP password: , BIGIP Configurations in bigips: and image version in image: Each of the above files can be completed by executing the kubectl command separately in order: $ kubectl apply -f 1 .clusterrole-and-binding.yaml $ kubectl apply -f 2 .install-kubernetes-gatewayapi-CRDs.yaml $ kubectl apply -f 3 .deploy-bigip-kubernetes-gateway-controller.yaml After the deployment is complete, the bigip-kubernetes-gateway controller listens for CRUD events for gateway-related resources. View deployment results via kubectl get deployment -n kube-system . View the run log via kubectl logs -f deployment/bigip-kubernetes-gateway -c bigip-kubernetes-gateway-pod -n kube-system","title":"Installation"},{"location":"quick-start/uninstall/","text":"Uninstallation \u00b6 The uninstall process is executed in reverse order to the installation process. You can refer to the deployment file described in the installation section, and execute the following commands to complete the uninstallation: $ kubectl delete -f 3 .deploy-bigip-kubernetes-gateway-controller.yaml $ kubectl delete -f 2 .install-kubernetes-gatewayapi-CRDs.yaml $ kubectl delete -f 1 .clusterrole-and-binding.yaml","title":"Unstalling guide"},{"location":"quick-start/uninstall/#uninstallation","text":"The uninstall process is executed in reverse order to the installation process. You can refer to the deployment file described in the installation section, and execute the following commands to complete the uninstallation: $ kubectl delete -f 3 .deploy-bigip-kubernetes-gateway-controller.yaml $ kubectl delete -f 2 .install-kubernetes-gatewayapi-CRDs.yaml $ kubectl delete -f 1 .clusterrole-and-binding.yaml","title":"Uninstallation"}]}