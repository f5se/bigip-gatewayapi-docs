{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\u200b\\-]"},"docs":[{"location":"","text":"F5 BIG-IP kubernetes Gateway online docs \u00b6 Welcome. This is the online docs of F5 BIG-IP kubernetes Gateway. F5 BIG-IP kubernetes Gateway is an implementation of K8S Gateway API . Source code of the project: https://github.com/F5Networks/bigip-kubernetes-gateway Any questions, kindly Please Contact us . Click here , see the latest release.","title":"Overview"},{"location":"#f5-big-ip-kubernetes-gateway-online-docs","text":"Welcome. This is the online docs of F5 BIG-IP kubernetes Gateway. F5 BIG-IP kubernetes Gateway is an implementation of K8S Gateway API . Source code of the project: https://github.com/F5Networks/bigip-kubernetes-gateway Any questions, kindly Please Contact us . Click here , see the latest release.","title":"F5 BIG-IP kubernetes Gateway online docs"},{"location":"Architecture/","text":"Overview \u00b6 This project aims to follow the Kubernetes Operator pattern It uses Controllers which provides a reconcile function responsible for synchronizing resources untile the desired state is reached on the cluster Framework and Workflow Design \u00b6 Basically, bigip-kubernetes-gateway architecture is designed as follows: It uses kubebuilder and controller-runtime framework to connect to the k8s cluster side and receive user operation events on various resources such as Gateway, HTTPRoute, Service, etc. It uses f5-bigip-rest module to connect to BIG-IP via iControl REST to do resource deliveries and deployments. Between the upstream and downstream, it uses a queue to decouple event processing and delivery logic. The correspondence between gateway-related resources and BIG-IP resources is as follows: From the above figure, we can see the correspondence between gateway-related resources and each resource on BIG-IP, that is, when using BIG-IP as a provider, the specific form of each gateway resource on BIG-IP is: K8S Resources BIG-IP Resources GatewayClass BIG-IP Device + Partition Gateway Virtual HTTPRoute iRule Service Pool Deploy(pods) Member","title":"Overview"},{"location":"Architecture/#overview","text":"This project aims to follow the Kubernetes Operator pattern It uses Controllers which provides a reconcile function responsible for synchronizing resources untile the desired state is reached on the cluster","title":"Overview"},{"location":"Architecture/#framework-and-workflow-design","text":"Basically, bigip-kubernetes-gateway architecture is designed as follows: It uses kubebuilder and controller-runtime framework to connect to the k8s cluster side and receive user operation events on various resources such as Gateway, HTTPRoute, Service, etc. It uses f5-bigip-rest module to connect to BIG-IP via iControl REST to do resource deliveries and deployments. Between the upstream and downstream, it uses a queue to decouple event processing and delivery logic. The correspondence between gateway-related resources and BIG-IP resources is as follows: From the above figure, we can see the correspondence between gateway-related resources and each resource on BIG-IP, that is, when using BIG-IP as a provider, the specific form of each gateway resource on BIG-IP is: K8S Resources BIG-IP Resources GatewayClass BIG-IP Device + Partition Gateway Virtual HTTPRoute iRule Service Pool Deploy(pods) Member","title":"Framework and Workflow Design"},{"location":"Architecture/gatewayclassrefer/","text":"GatewayClass and BIG-IP References \u00b6 The relationship between GatewayClass and BIG-IP is designed as a many-to-one relationship, that is, multiple gatewayclasses can correspond to the same BIG-IP, the name field of the GatewayClass resource is mapped as the partition name on the BIG-IP, and the gateway-related resources associated with the GatewayClass will be created as ltm resources under that partition. When multiple GatewayClass resources correspond to the same BIG-IP, they must use the same BIG-IP configuration information, that is, the same ConfigMap, as shown below. gatewayclass.yaml: --- apiVersion : gateway.networking.k8s.io/v1beta1 kind : GatewayClass metadata : name : bigip spec : controllerName : f5.io/gateway-controller-name parametersRef : # -> Here, the Configmap referenced by multiple GatewayClasses must be unique group : core kind : ConfigMap name : my-configmap namespace : kube-system This configmap will be saved by the controller to the BIG-IP DataGroup, and an error will be reported when another configmap is attempted.","title":"GatewayClass and BIG-IP References"},{"location":"Architecture/gatewayclassrefer/#gatewayclass-and-big-ip-references","text":"The relationship between GatewayClass and BIG-IP is designed as a many-to-one relationship, that is, multiple gatewayclasses can correspond to the same BIG-IP, the name field of the GatewayClass resource is mapped as the partition name on the BIG-IP, and the gateway-related resources associated with the GatewayClass will be created as ltm resources under that partition. When multiple GatewayClass resources correspond to the same BIG-IP, they must use the same BIG-IP configuration information, that is, the same ConfigMap, as shown below. gatewayclass.yaml: --- apiVersion : gateway.networking.k8s.io/v1beta1 kind : GatewayClass metadata : name : bigip spec : controllerName : f5.io/gateway-controller-name parametersRef : # -> Here, the Configmap referenced by multiple GatewayClasses must be unique group : core kind : ConfigMap name : my-configmap namespace : kube-system This configmap will be saved by the controller to the BIG-IP DataGroup, and an error will be reported when another configmap is attempted.","title":"GatewayClass and BIG-IP References"},{"location":"Architecture/parameters/","text":"Parameters \u00b6 Examples of the usecase of parameters are available in the deployment file: deploy/3.deploy-bigip-k8s-gtw-ctlr.yaml ... containers : # kubectl logs -f deployment/bigip-kubernetes-gateway -c bigip-kubernetes-gateway-pod -n kube-system - name : bigip-kubernetes-gateway-pod image : zongzw/bigip-kubernetes-gateway:latest-20221115-162758 imagePullPolicy : IfNotPresent env : - name : BIGIP_USERNAME valueFrom : secretKeyRef : name : bigip-login key : username - name : BIGIP_PASSWORD valueFrom : secretKeyRef : name : bigip-login key : password - name : BIGIP_URL valueFrom : secretKeyRef : name : bigip-login key : url command : [ \"/bigip-kubernetes-gateway-controller-linux\" ] args : [ \"--bigip-username=$(BIGIP_USERNAME)\" , \"--bigip-password=$(BIGIP_PASSWORD)\" , \"--bigip-url=$(BIGIP_URL)\" , \"--gateway-class=bigip\" ] ... As shown above, you can see that we currently pass in the connection url, username and password of BIG-IP through parameters. In the future, this method will change after the implementation of the gatewayclass. For details about the usage of the file, See installation","title":"Controller parameters"},{"location":"Architecture/parameters/#parameters","text":"Examples of the usecase of parameters are available in the deployment file: deploy/3.deploy-bigip-k8s-gtw-ctlr.yaml ... containers : # kubectl logs -f deployment/bigip-kubernetes-gateway -c bigip-kubernetes-gateway-pod -n kube-system - name : bigip-kubernetes-gateway-pod image : zongzw/bigip-kubernetes-gateway:latest-20221115-162758 imagePullPolicy : IfNotPresent env : - name : BIGIP_USERNAME valueFrom : secretKeyRef : name : bigip-login key : username - name : BIGIP_PASSWORD valueFrom : secretKeyRef : name : bigip-login key : password - name : BIGIP_URL valueFrom : secretKeyRef : name : bigip-login key : url command : [ \"/bigip-kubernetes-gateway-controller-linux\" ] args : [ \"--bigip-username=$(BIGIP_USERNAME)\" , \"--bigip-password=$(BIGIP_PASSWORD)\" , \"--bigip-url=$(BIGIP_URL)\" , \"--gateway-class=bigip\" ] ... As shown above, you can see that we currently pass in the connection url, username and password of BIG-IP through parameters. In the future, this method will change after the implementation of the gatewayclass. For details about the usage of the file, See installation","title":"Parameters"},{"location":"Operation-and-troubleshooting/ki/","text":"Known Issues \u00b6 No issue yet. Please report your issue or suggestion on https://github.com/F5Networks/bigip-kubernetes-gateway/issues","title":"Common FAQ"},{"location":"Operation-and-troubleshooting/ki/#known-issues","text":"No issue yet. Please report your issue or suggestion on https://github.com/F5Networks/bigip-kubernetes-gateway/issues","title":"Known Issues"},{"location":"Operation-and-troubleshooting/trubeshooting/","text":"Trouble Shooting \u00b6 Use the following command to trace or detect any issue: $ kubectl logs -f deployment/bigip-kubernetes-gateway -c bigip-kubernetes-gateway-pod -n kube-system Will continously complement this section in the future.","title":"Troubleshooting"},{"location":"Operation-and-troubleshooting/trubeshooting/#trouble-shooting","text":"Use the following command to trace or detect any issue: $ kubectl logs -f deployment/bigip-kubernetes-gateway -c bigip-kubernetes-gateway-pod -n kube-system Will continously complement this section in the future.","title":"Trouble Shooting"},{"location":"Release-notes/","text":"Release \u00b6 We will release the first version soon. Check later.","title":"Releases"},{"location":"Release-notes/#release","text":"We will release the first version soon. Check later.","title":"Release"},{"location":"Support-and-contact/","text":"Support and contact \u00b6 For the gateway controller support: \u00b6 Currently please raise your questions or issues by github Issues For the online docs support: \u00b6 Currently please raise your questions or issues by github Issues Welcome contact us by below ways: \u00b6 Slack channel (forl global users) Wechat group (for China Wechat users only)","title":"Tech Support"},{"location":"Support-and-contact/#support-and-contact","text":"","title":"Support and contact"},{"location":"Support-and-contact/#for-the-gateway-controller-support","text":"Currently please raise your questions or issues by github Issues","title":"For the gateway controller support:"},{"location":"Support-and-contact/#for-the-online-docs-support","text":"Currently please raise your questions or issues by github Issues","title":"For the online docs support:"},{"location":"Support-and-contact/#welcome-contact-us-by-below-ways","text":"Slack channel (forl global users) Wechat group (for China Wechat users only)","title":"Welcome contact us by below ways:"},{"location":"Support-and-contact/contributions/","text":"Wecome any contributions \u00b6 For online docs, kindly pls PR to https://github.com/f5se/bigip-gatewayapi-docs For coding contribution kindly pls refer the guide in https://github.com/F5Networks/bigip-kubernetes-gateway Here are the contributors for now\uff1a zongzw f5zong Niklaus-xie myf5 Jing Lin License \u00b6 Copyright 2022. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Contributions"},{"location":"Support-and-contact/contributions/#wecome-any-contributions","text":"For online docs, kindly pls PR to https://github.com/f5se/bigip-gatewayapi-docs For coding contribution kindly pls refer the guide in https://github.com/F5Networks/bigip-kubernetes-gateway Here are the contributors for now\uff1a zongzw f5zong Niklaus-xie myf5 Jing Lin","title":"Wecome any contributions"},{"location":"Support-and-contact/contributions/#license","text":"Copyright 2022. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"Use-Cases/advancedhttp/","text":"Advanced HTTPRoute Usecase \u00b6","title":"Advanced HTTProute"},{"location":"Use-Cases/advancedhttp/#advanced-httproute-usecase","text":"","title":"Advanced HTTPRoute Usecase"},{"location":"Use-Cases/bigip-setup/","text":"BIG-IP Setup \u00b6 After the bigip-kubernetes-gateway controller is deployed, the first step is to create a gatewayclass resource. A gatewayclass resource corresponds to a BIG-IP. According to the definition of gatewayclass by SIGNetworks , we know that gatewayclass marks the implementation carrier of gateway-related resources, and in the bigip-kubernetes-gateway senarios, the carrier corresponding to the gatewayclass is BIG-IP. gatewayclass.yaml: --- apiVersion : gateway.networking.k8s.io/v1beta1 kind : GatewayClass metadata : name : bigip spec : controllerName : f5.io/gateway-controller-name parametersRef : group : core kind : ConfigMap name : my-configmap namespace : kube-system The configmap my-configmap in the parametersRef section is the BIG-IP configuration file. BIG-IP can be configured by executing kubectl apply -f gatewayclass.yaml when the bigip-kubernetes-gateway controller receives this event from the user. The controller will parse the relevant configuration in the spec and configure the BIG-IP device, including the network, basic partition, and so on.","title":"BIG-IP Provider Setup"},{"location":"Use-Cases/bigip-setup/#big-ip-setup","text":"After the bigip-kubernetes-gateway controller is deployed, the first step is to create a gatewayclass resource. A gatewayclass resource corresponds to a BIG-IP. According to the definition of gatewayclass by SIGNetworks , we know that gatewayclass marks the implementation carrier of gateway-related resources, and in the bigip-kubernetes-gateway senarios, the carrier corresponding to the gatewayclass is BIG-IP. gatewayclass.yaml: --- apiVersion : gateway.networking.k8s.io/v1beta1 kind : GatewayClass metadata : name : bigip spec : controllerName : f5.io/gateway-controller-name parametersRef : group : core kind : ConfigMap name : my-configmap namespace : kube-system The configmap my-configmap in the parametersRef section is the BIG-IP configuration file. BIG-IP can be configured by executing kubectl apply -f gatewayclass.yaml when the bigip-kubernetes-gateway controller receives this event from the user. The controller will parse the relevant configuration in the spec and configure the BIG-IP device, including the network, basic partition, and so on.","title":"BIG-IP Setup"},{"location":"Use-Cases/crossrefer/","text":"Cross Reference Usecase \u00b6","title":"Cross Reference"},{"location":"Use-Cases/crossrefer/#cross-reference-usecase","text":"","title":"Cross Reference Usecase"},{"location":"Use-Cases/simplehttp/","text":"Simple HTTPRoute Usecase \u00b6","title":"Simple HTTProute"},{"location":"Use-Cases/simplehttp/#simple-httproute-usecase","text":"","title":"Simple HTTPRoute Usecase"},{"location":"quick-start/","text":"Get Started \u00b6 You\u2019ll need a Kubernetes cluster to run against. You can use KIND to get a local cluster for testing, or run against a remote cluster. Note: bigip-kubernetes-gateway controller will automatically use the current context in your kubeconfig file (i.e. whatever cluster kubectl cluster-info shows). If the controller runs in In-Cluster mode, it will depends on the serviceaccount and role/role-binding described in installation .","title":"Prerequisites"},{"location":"quick-start/#get-started","text":"You\u2019ll need a Kubernetes cluster to run against. You can use KIND to get a local cluster for testing, or run against a remote cluster. Note: bigip-kubernetes-gateway controller will automatically use the current context in your kubeconfig file (i.e. whatever cluster kubectl cluster-info shows). If the controller runs in In-Cluster mode, it will depends on the serviceaccount and role/role-binding described in installation .","title":"Get Started"},{"location":"quick-start/installation/","text":"Installation \u00b6 In the repository, we provide the corresponding Gateway API deployment configuration file, which can be used in the deployment process of the BIGIP-Kubernetes-Gateway controller in general. The directory where the deployment files are located is: https://github.com/F5Networks/bigip-kubernetes-gateway/tree/master/deploy The files are numbered and can complete the deployment process in order, where: file name functionality notes 0.bigip-config.yaml BIG-IP connecting info Required inputs by user 1.clusterrole-and-binding.yaml Create a user and role with corresponding operation permissions in the k8S cluster No further input is required 2.install-bigip-k8s-gtw-crds.yaml Install the gateway API CRD and admission deployment No further input is required 3.deploy-bigip-k8s-gtw-ctlr.yaml Deploy bigip-kubernetes-gateway controller Required inputs by user to change image: Each of the above files can be completed by executing the kubectl command separately in order: $ kubectl apply -f 0 .bigip-config.yaml $ kubectl apply -f 1 .clusterrole-and-binding.yaml $ kubectl apply -f 2 .install-bigip-k8s-gtw-crds.yaml $ kubectl apply -f 3 .deploy-bigip-k8s-gtw-ctlr.yaml After the deployment is complete, the bigip-kubernetes-gateway controller listens for CRUD events for gateway-related resources. View deployment results via kubectl get deployment -n kube-system . View the run log via kubectl logs -f deployment/bigip-kubernetes-gateway -c bigip-kubernetes-gateway-pod -n kube-system","title":"Installing guide"},{"location":"quick-start/installation/#installation","text":"In the repository, we provide the corresponding Gateway API deployment configuration file, which can be used in the deployment process of the BIGIP-Kubernetes-Gateway controller in general. The directory where the deployment files are located is: https://github.com/F5Networks/bigip-kubernetes-gateway/tree/master/deploy The files are numbered and can complete the deployment process in order, where: file name functionality notes 0.bigip-config.yaml BIG-IP connecting info Required inputs by user 1.clusterrole-and-binding.yaml Create a user and role with corresponding operation permissions in the k8S cluster No further input is required 2.install-bigip-k8s-gtw-crds.yaml Install the gateway API CRD and admission deployment No further input is required 3.deploy-bigip-k8s-gtw-ctlr.yaml Deploy bigip-kubernetes-gateway controller Required inputs by user to change image: Each of the above files can be completed by executing the kubectl command separately in order: $ kubectl apply -f 0 .bigip-config.yaml $ kubectl apply -f 1 .clusterrole-and-binding.yaml $ kubectl apply -f 2 .install-bigip-k8s-gtw-crds.yaml $ kubectl apply -f 3 .deploy-bigip-k8s-gtw-ctlr.yaml After the deployment is complete, the bigip-kubernetes-gateway controller listens for CRUD events for gateway-related resources. View deployment results via kubectl get deployment -n kube-system . View the run log via kubectl logs -f deployment/bigip-kubernetes-gateway -c bigip-kubernetes-gateway-pod -n kube-system","title":"Installation"},{"location":"quick-start/uninstall/","text":"Uninstallation \u00b6 The uninstall process is executed in reverse order to the installation process. You can refer to the deployment file described in the installation section, and execute the following commands to complete the uninstallation: $ kubectl apply -f 3 .deploy-bigip-k8s-gtw-ctlr.yaml $ kubectl apply -f 2 .install-bigip-k8s-gtw-crds.yaml $ kubectl apply -f 1 .clusterrole-and-binding.yaml $ kubectl apply -f 0 .bigip-config.yaml","title":"Unstalling guide"},{"location":"quick-start/uninstall/#uninstallation","text":"The uninstall process is executed in reverse order to the installation process. You can refer to the deployment file described in the installation section, and execute the following commands to complete the uninstallation: $ kubectl apply -f 3 .deploy-bigip-k8s-gtw-ctlr.yaml $ kubectl apply -f 2 .install-bigip-k8s-gtw-crds.yaml $ kubectl apply -f 1 .clusterrole-and-binding.yaml $ kubectl apply -f 0 .bigip-config.yaml","title":"Uninstallation"}]}